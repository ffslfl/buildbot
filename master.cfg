# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("mtrnord-worker", "QJIUZwy9VU")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'git://github.com/ffslfl/site-slfl.git',
    workdir='gitpoller-workdir', branch='2019.x',
    pollInterval=300))

c['change_source'].append(changes.GitPoller(
    'git://github.com/freifunk-gluon/gluon.git',
    workdir='gitpoller-workdir', branch='master',
    pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["ar71xx-generic"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["ar71xx-generic"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

ar71xx_generic_factory = util.BuildFactory()
# check out gluon
ar71xx_generic_factory.addStep(steps.Git(repourl='git://github.com/freifunk-gluon/gluon.git', mode='incremental', branch='v2020.2.x'))
# check out site
ar71xx_generic_factory.addStep(steps.Git(repourl='git://github.com/ffslfl/site-slfl.git', mode='incremental', workdir='build/site', branch='2019.x'))
# run the gluon update
ar71xx_generic_factory.addStep(steps.ShellCommand(command=["make", "update"]))
# build ar71xx-generic
ar71xx_generic_factory.addStep(steps.ShellCommand(command=["make"],
 env={"GLUON_TARGET": "ar71xx-generic"}))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="ar71xx-generic",
      workernames=["mtrnord-worker"],
      factory=ar71xx_generic_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Firmware FFSLFL"
c['titleURL'] = "https://buildbot.nordgedanken.dev"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "https://buildbot.nordgedanken.dev")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 80),
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
